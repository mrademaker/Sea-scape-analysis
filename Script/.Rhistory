library(rgdal)
library(sf)
#Open filtered dataset
data=read.csv(paste(path,"DATRAS/cpue_length_hour/filtered_Limanda_limanda.csv",sep=""))
coordinates(data)= ~ ShootLong + ShootLat
#############################################
###### Determine position in sea scape#######
#############################################
path=("C:/Users/mrademaker/Documents/Research projects/STCNWS/")
#Open filtered dataset
data=read.csv(paste(path,"DATRAS/cpue_length_hour/filtered_Limanda_limanda.csv",sep=""))
coordinates(data)= ~ ShootLong + ShootLat
#Determine for each location in which seascape it is located----
ssc_map=readOGR(paste(path,"Seascapes/.",sep=""),layer="seascapes")
ssc_map_wgs84 <- spTransform(ssc_map, CRS("+proj=longlat +datum=WGS84"))
##for plotting----
shapefile_df <- fortify(ssc_map_wgs84)
map <- ggplot() +
# geom_path(data = shapefile_df,
#          aes(x = long, y = lat, group = group),
#         color = 'black', size = 1)+
# ggtitle("Seascapes plot and Limanda limanda catches")
# print(map)
#p2 = map+geom_point(data=data,aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
#print(p2)
#Determine for each location in which seascape it is located----
ssc_map=readOGR(paste(path,"Seascapes/.",sep=""),layer="seascapes")
##for plotting----
shapefile_df <- fortify(ssc_map_wgs84)
map <- ggplot() +
geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'black', size = 1)+
ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
p2 = map+geom_point(data=data,aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
library(ggplot2)
map <- ggplot() +
geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'black', size = 1)+
ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
library(rgdal)
library(sf)
library(ggplot2)
#############################################
###### Determine position in sea scape#######
#############################################
path=("C:/Users/mrademaker/Documents/Research projects/STCNWS/")
#Open filtered dataset
data=read.csv(paste(path,"DATRAS/cpue_length_hour/filtered_Limanda_limanda.csv",sep=""))
coordinates(data)= ~ ShootLong + ShootLat
#Determine for each location in which seascape it is located----
ssc_map=readOGR(paste(path,"Seascapes/.",sep=""),layer="seascapes")
ssc_map_wgs84 <- spTransform(ssc_map, CRS("+proj=longlat +datum=WGS84"))
##for plotting----
shapefile_df <- fortify(ssc_map_wgs84)
map <- ggplot() +
geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'black', size = 1)+
ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
p2 = map+geom_point(data=data,aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
#Open filtered dataset
data=read.csv(paste(path,"DATRAS/cpue_length_hour/filtered_Limanda_limanda.csv",sep=""))
coordinates(data)= ~ ShootLong + ShootLat
#Determine for each location in which seascape it is located----
ssc_map=readOGR(paste(path,"Seascapes/.",sep=""),layer="seascapes")
ssc_map_wgs84 <- spTransform(ssc_map, CRS("+proj=longlat +datum=WGS84"))
proj4string(data) <- proj4string(ssc_map_wgs84)
##for plotting----
shapefile_df <- fortify(ssc_map_wgs84)
map <- ggplot() +
geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'black', size = 1)+
ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
p2 = map+geom_point(data=data,aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
p2 = map+geom_point(data=as.data.frame(data),aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
print(p2)
#load packages----
library(nonlinearTseries)
library(purrr)
library(plyr)
library(tidyr)
library(pbapply)
library(dplyr)
library(data.table)
library(ggplot2)
library(magick)
library(here)
library(magrittr)
library(png)
library(grid)
library(jpeg)
library(gridExtra)
library(rgdal)
library(sf)
library(gratia)
library(mgcv)
library(itsadug)
library(INDperform)
library(gtools)
library(imager)
library(mgcViz)
library(pracma)
library(cdfquantreg)
library(remotes)
library(tseries)
library(NlinTS)
library(astsa)
library(TTR)
library(fpp)
library(Rsenal)
library(ggmap)
library(rbin)
st.err <- function(x) {
sd(x)/sqrt(length(x))
}
#function for selecting specific column to omit NA----
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
#deriv function----
tmp <- tempfile()
Deriv <- function(mod, n = 200, eps = 1e-7, newdata) {
#if(isTRUE(inherits(mod,``list``)))
mod <- mod$gam
m.terms <- attr(terms(mod), "term.labels")
if(missing(newdata)) {
newD <- sapply(model.frame(mod)[, m.terms, drop = FALSE],
function(x) seq(min(x), max(x), length = n))
names(newD) <- m.terms
} else {
newD <- newdata
}
X0 <- predict(mod, data.frame(newD), type = "lpmatrix")
newD <- newD + eps
X1 <- predict(mod, data.frame(newD), type = "lpmatrix")
Xp <- (X1 - X0) / eps
Xp.r <- NROW(Xp)
Xp.c <- NCOL(Xp)
## dims of bs
bs.dims <- sapply(mod$smooth, "[[", "bs.dim") - 1
# number of smooth terms
t.labs <- attr(mod$terms, "term.labels")
nt <- length(t.labs)
## list to hold the derivatives
lD <- vector(mode = "list", length = nt)
names(lD) <- t.labs
for(i in seq_len(nt)) {
Xi <- Xp * 0
want <- grep(t.labs[i], colnames(X1))
Xi[, want] <- Xp[, want]
df <- Xi %*% coef(mod)
df.sd <- rowSums(Xi %*% mod$Vp * Xi)^.5
lD[[i]] <- list(deriv = df, se.deriv = df.sd)
}
class(lD) <- "Deriv"
lD$gamModel <- mod
lD$eps <- eps
lD$eval <- newD - eps
return(lD)
}
confint.Deriv <- function(object, term, alpha = 0.05, ...) {
l <- length(object) - 3
term.labs <- names(object[seq_len(l)])
if(missing(term))
term <- term.labs
Term <- match(term, term.labs)
##term <- term[match(term, term.labs)]
if(any(miss <- is.na(Term)))
stop(paste("'term'", term[miss], "not a valid model term."))
## if(is.na(term))
##     stop("'term' not a valid model term.")
res <- vector(mode = "list", length = length(term))
names(res) <- term
residual.df <- length(object$gamModel$y) - sum(object$gamModel$edf)
tVal <- qt(1 - (alpha/2), residual.df)
## tVal <- qt(1 - (alpha/2), object$gamModel$df.residual)
for(i in seq_along(term)) {
upr <- object[[term[i]]]$deriv + tVal * object[[term[i]]]$se.deriv
lwr <- object[[term[i]]]$deriv - tVal * object[[term[i]]]$se.deriv
res[[term[i]]] <- list(upper = drop(upr), lower = drop(lwr))
}
res$alpha = alpha
res
}
signifD <- function(x, d, upper, lower, eval = 0) {
miss <- upper > eval & lower < eval
incr <- decr <- x
want <- d > eval
incr[!want | miss] <- NA
want <- d < eval
decr[!want | miss] <- NA
list(incr = incr, decr = decr)
}
plot.Deriv <- function(x, alpha = 0.05, polygon = TRUE,
sizer = FALSE, term, eval = 0, lwd = 3,
col = "lightgrey", border = col,
ylab, xlab, ...) {
l <- length(x) - 3
## get terms and check specified (if any) are in model
term.labs <- names(x[seq_len(l)])
if(missing(term))
term <- term.labs
Term <- match(term, term.labs)
if(any(miss <- is.na(Term)))
stop(paste("'term'", term[miss], "not a valid model term."))
if(all(is.na(Term)))
stop("All terms in 'term' not found in model.")
l <- sum(!miss)
nplt <- n2mfrow(l)
## tVal <- qt(1 - (alpha/2), x$gamModel$df.residual)
residual.df <- length(x$gamModel$y) - sum(x$gamModel$edf)
tVal <- qt(1 - (alpha/2), residual.df)
if(missing(ylab))
ylab <- expression(italic(hat(f)*"'"*(x)))
if(missing(xlab)) {
xlab <- attr(terms(x$gamModel), "term.labels")[Term]
names(xlab) <- xlab
}
layout(matrix(seq_len(l), nrow = nplt[1], ncol = nplt[2]))
CI <- confint(x, term = term, alpha = alpha)
for(i in seq_along(term)) {
## for(i in seq_len(l)) {
upr <- CI[[term[i]]]$upper
lwr <- CI[[term[i]]]$lower
ylim <- range(upr, lwr)
plot(x$eval[,term[i]], x[[term[i]]]$deriv, type = "n",
ylim = ylim, ylab = ylab, xlab = xlab[term[i]], ...)
if(isTRUE(polygon)) {
polygon(c(x$eval[,term[i]], rev(x$eval[,term[i]])),
c(upr, rev(lwr)), col = col, border = border)
} else {
lines(x$eval[,term[i]], upr, lty = "dashed")
lines(x$eval[,term[i]], lwr, lty = "dashed")
}
abline(h = 0, ...)
if(isTRUE(sizer)) {
lines(x$eval[,term[i]], x[[term[i]]]$deriv, lwd = 1)
S <- signifD(x[[term[i]]]$deriv, x[[term[i]]]$deriv, upr, lwr,
eval = eval)
lines(x$eval[,term[i]], S$incr, lwd = lwd, col = "blue")
lines(x$eval[,term[i]], S$decr, lwd = lwd, col = "red")
} else {
lines(x$eval[,term[i]], x[[term[i]]]$deriv, lwd = 2)
}
}
layout(1)
invisible(x)
}
#function to generate random values from multivariate normal dist.----
rmvn <- function(n, mu, sig) { ## MVN random deviates
L <- mroot(sig)
m <- ncol(L)
t(mu + L %*% matrix(rnorm(m*n), m, n))
}
#set path----
path=("C:/Users/mrademaker/Documents/Research projects/STCNWS/DATRAS/cpue_length_hour/")
#file with species info----
species_info=read.table(paste(path,"Data/spec_info.txt",sep=""),sep="\t",header=TRUE)
species_info$file_name =gsub(" ","_",species_info$Scientific.name)
#open seascapes map and convert to wgs84 long,lat----
ssc_map=readOGR("C:/Users/mrademaker/Documents/Research projects/STCNWS/Seascapes/To_Mark_ArcGIS.",layer="seascapes")
ssc_map_wgs84 <- spTransform(ssc_map, CRS("+proj=longlat +datum=WGS84"))
#filter and adjust data_sets----
for (k in 1:nrow(species_info)){
file_name=paste(path,"Data/",species_info$file_name[i],sep="")
print(file_name)
#Read in data
data=read.csv(paste(file_name,".csv",sep=""))
#Subset with same fishing gear
data=subset(data, Gear == 'GOV')
#Subset only during day
#data=subset(data, DayNight == "D")
#Bin depth in 20m classes
#print(max(data$Depth))
#data$Depth=abs(data$Depth)
#data$Depth_bin=factor(cut(data$Depth,breaks=c(0,50,100,150,200,250,300,350,400)))
#
#Length in cm
data$LngtClass_cm=data$LngtClass/10
#Add info on weight conversion formula
data$WeightConv=species_info$LW.conversion[i]
#Calculate weight for corresponding Length Class
data$Weight=species_info$a[i]*(data$LngtClass_cm^species_info$b[i])
# Multiply weight by CPUE number per hour for indication of total weight(biomass) per length class
data$Total_wgt=data$CPUE_number_per_hour*data$Weight
#Determine location (Seascape)
coordinates(data)= ~ ShootLong + ShootLat
proj4string(data) <- proj4string(ssc_map_wgs84)
data_in=as.data.frame(over(data, ssc_map_wgs84))
data_ssc=as.data.frame(cbind(as.data.frame(data),data_in))
# # # check on map
# # shapefile_df <- fortify(ssc_map_wgs84)
# #
# # map <- ggplot() +
# #   geom_path(data = shapefile_df,
#             aes(x = long, y = lat, group = group),
#             color = 'black', size = 1)+
#   ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
# print(map)
#
# p2 = map+geom_point(data=as.data.frame(data),aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
# print(p2)
#
#save filtered file
file_name=sprintf("C:/Users/mrademaker/Documents/Research projects/STCNWS/DATRAS/cpue_length_hour/Data/Filtered_%s.csv",species_info$file_name[i])
write.csv(data_ssc,file_name)
#
}
#filter and adjust data_sets----
for (i in 1:nrow(species_info)){
file_name=paste(path,"Data/",species_info$file_name[i],sep="")
print(file_name)
#Read in data
data=read.csv(paste(file_name,".csv",sep=""))
#Subset with same fishing gear
data=subset(data, Gear == 'GOV')
#Subset only during day
#data=subset(data, DayNight == "D")
#Bin depth in 20m classes
#print(max(data$Depth))
#data$Depth=abs(data$Depth)
#data$Depth_bin=factor(cut(data$Depth,breaks=c(0,50,100,150,200,250,300,350,400)))
#
#Length in cm
data$LngtClass_cm=data$LngtClass/10
#Add info on weight conversion formula
data$WeightConv=species_info$LW.conversion[i]
#Calculate weight for corresponding Length Class
data$Weight=species_info$a[i]*(data$LngtClass_cm^species_info$b[i])
# Multiply weight by CPUE number per hour for indication of total weight(biomass) per length class
data$Total_wgt=data$CPUE_number_per_hour*data$Weight
#Determine location (Seascape)
coordinates(data)= ~ ShootLong + ShootLat
proj4string(data) <- proj4string(ssc_map_wgs84)
data_in=as.data.frame(over(data, ssc_map_wgs84))
data_ssc=as.data.frame(cbind(as.data.frame(data),data_in))
# # # check on map
# # shapefile_df <- fortify(ssc_map_wgs84)
# #
# # map <- ggplot() +
# #   geom_path(data = shapefile_df,
#             aes(x = long, y = lat, group = group),
#             color = 'black', size = 1)+
#   ggtitle("Seascapes plot and NS-IBTS survey data (Limanda limanda)")
# print(map)
#
# p2 = map+geom_point(data=as.data.frame(data),aes(x=ShootLong,y=ShootLat),color="black",fill="red",size=1,shape=21)
# print(p2)
#
#save filtered file
file_name=sprintf("C:/Users/mrademaker/Documents/Research projects/STCNWS/DATRAS/cpue_length_hour/Data/Filtered_%s.csv",species_info$file_name[i])
write.csv(data_ssc,file_name)
#
}
#set path----
path=("C:/Users/mrademaker/Documents/Research projects/STCNWS/DATRAS/cpue_length_hour/")
#file with species info----
species_info=read.table(paste(path,"Data/spec_info.txt",sep=""),sep="\t",header=TRUE)
species_info$file_name =gsub(" ","_",species_info$Scientific.name)
###########################################
#### compute temporal correlation file #### ----
###########################################
#file with species info----
species_info=read.table(paste(path,"Data/spec_info.txt",sep=""),sep="\t",header=TRUE)
species_info$file_name =gsub(" ","_",species_info$Scientific.name)
#selected species for temporal
for (k in 1:nrow(species_info)){
data=read.csv(paste(path,sprintf("Data/Filtered_%s.csv",species_info$file_name[k]),sep=""))
names(data)[names(data) == "id"] <- "Seascapenr"
print(species_info$file_name[k])
# Unique combination between vessel, haulNo. and Year, i.e. each unique haul in dataset
data$ID = cumsum(!duplicated(data[3:7]))
ssc_data=completeFun(data,"Seascapenr")
ssc_data=subset(ssc_data,Quarter==1)
data_agg=ssc_data
data_agg=aggregate(Total_wgt ~ ID+Year+Seascapenr+Species+Ship+DayNight, data=ssc_data, sum)
# convert weights from grams to kg
data_agg$biomass_kg=data_agg$Total_wgt/1000
Mean_data=aggregate(biomass_kg~Year+Seascapenr,data=data_agg,mean)
#1----
data_agg1=subset(Mean_data,Seascapenr==1)
#2-----
data_agg2=subset(Mean_data,Seascapenr==2)
#3----
data_agg3=subset(Mean_data,Seascapenr==3)
#4----
data_agg4=subset(Mean_data,Seascapenr==4)
#5----
data_agg5=subset(Mean_data,Seascapenr==5)
#6----
data_agg6=subset(Mean_data,Seascapenr==6)
#7----
data_agg7=subset(Mean_data,Seascapenr==7)
#8----
data_agg8=subset(Mean_data,Seascapenr==8)
#9----
data_agg9=subset(Mean_data,Seascapenr==9)
#10----
data_agg10=subset(Mean_data,Seascapenr==10)
data_meanyear=cbind(data_agg1$biomass_kg,data_agg2$biomass_kg,data_agg3$biomass_kg,data_agg4$biomass_kg,data_agg5$biomass_kg,data_agg6$biomass_kg,data_agg7$biomass_kg,data_agg8$biomass_kg,data_agg9$biomass_kg,data_agg10$biomass_kg)
write.csv(data_meanyear,paste(path,sprintf("Data/PCMCI_prep/%s_PCMCI_prep.csv",species_info$file_name[k]),sep=""))
}
